"""
Django settings for ecomproject project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', True)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Thirt Party
     'allauth',
    'allauth.account',
    'allauth.socialaccount',
     'allauth.socialaccount.providers.google',
      'allauth.socialaccount.providers.facebook',
    'taggit',
    'ckeditor',
    'easyaudit',

    # Celery
    'django_celery_results',
    'django_celery_beat',
    
    # Custom Apps
    'core',
    'userauths',
    'blog',
    'order',
    'wishlist',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'easyaudit.middleware.easyaudit.EasyAuditMiddleware',
    # Account middleware:
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'ecomproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':[os.path.join(BASE_DIR , 'templates'),
                 os.path.join(BASE_DIR, 'templates', 'allauth'),
                ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'core.context_processor.core_context',
                'blog.context_processor.blog_context',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecomproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
   'default': {
    'ENGINE': config('SQL_ENGINE', default='django.db.backends.postgresql'),
    'NAME': config('SQL_DATABASE', default='postgres'),
    'USER': config('SQL_USER', default='postgres'),
    'PASSWORD': config('SQL_PASSWORD', default=''),
    'HOST': config('SQL_HOST', default='db'),  # 'db' = Docker service name
    'PORT': config('SQL_PORT', default='5432'),
    'OPTIONS': {
        'sslmode': config('DB_SSL_MODE', default='prefer'),
        'connect_timeout': 5,
    },
    'CONN_MAX_AGE': 300,
}
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = "media/"

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

JAZZMIN_SETTINGS = {
    'site_header': "Ecommerce",
    'site_brand': "Valleys",
    'login_logo': "assets/img/logo.svg",
    'site_logo': "assets/img/favicon.ico",
    'copyright': "Valleys Ltd",

    "topmenu_links": [

        {"name": "Home",  "url": "admin:index"},

        {"name": "Go to Website", "url": "core:index", "new_window": True},
    ],
}

from django.urls import reverse_lazy

# All auth
LOGIN_URL = reverse_lazy('userauths:sign-in')
LOGOUT_REDIRECT_URL = reverse_lazy('userauths:sign-in')
LOGIN_REDIRECT_URL = reverse_lazy('core:index')
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_LOGIN_METHODS = ['email']
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
AUTH_USER_MODEL = 'userauths.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    "allauth.account.auth_backends.AuthenticationBackend",
    ]

# Social LOGIN
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.getenv("Google_OAUTH_CLIENT_ID", ''),
            "secret": os.getenv("Google_OAUTH_SECRET", ''),
        },
        'SCOPE': [
                'profile',
                'email',
            ],
            'AUTH_PARAMS': {
                'access_type': 'online',
            },
            "OAUTH_PKCE_ENABLED": True,
    },
    "facebook": {
        "APP": {
            "client_id": os.getenv("Facebook_OAUTH_CLIENT_ID"),
            "secret": os.getenv("Facebook_OAUTH_SECRET"),
        },
        "METHOD": "oauth2",
        "SCOPE": ["email", "public_profile"],
        "AUTH_PARAMS": {"auth_type": "reauthenticate"},
        "FIELDS": ["id", "email", "name", "first_name", "last_name"],
        "VERSION": "v19.0",  
    }
}

#Sign up with a socialAccount 
SOCIALACCOUNT_QUERY_EMAIL = "email" in ACCOUNT_SIGNUP_FIELDS

# Allow user to sign up with a social account in SOCIALACCOUNT_ADAPTER
ACCOUNT_ALLOW_SIGNUPS = True

# Adapters
SOCIALACCOUNT_ADAPTER = 'userauths.adapters.CustomSocialAccountAdapter' 
ACCOUNT_ADAPTER = "userauths.adapters.MyLoginAccountAdapter"

SOCIALACCOUNT_AUTO_SIGNUP = True
# SOCIALACCOUNT_EMAIL_REQUIRED = False
   
   
# Email sending credentials
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = config('EMAIL_PORT')

CKEDITOR_UPLOAD_PATH = 'uploads/'

CKEDITOR_CONFIGS = {
    'default': {
        'skin': 'moono',
        # 'toolbar': 'all',
        # 'extraPlugins': ','.join(
        #     [
        #         'widget',
        #         'dialog',
        #     ]
        # ),
    }
}

# Celery
# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', 'redis://redis:6379/0')  # Using service name from docker-compose
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'  # Or your preferred timezone

# Optional: Store task results in Django database
CELERY_RESULT_BACKEND = 'django-db'

from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    # 'add-every-30-seconds': {
    #     'task': 'django-ecommerce.tasks.add',
    #     'schedule': 30.0,
    #     'args': (16, 16)
    # },
    # 'send-report-every-monday': {
    #     'task': 'django-ecommerce.tasks.send_email_task',
    #     'schedule': crontab(hour=7, minute=30, day_of_week=1),
    # },
}
